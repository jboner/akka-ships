//////////////////////////////////////
// 1. Scala Actors
//////////////////////////////////////

* Starting point. No lab.

//////////////////////////////////////
// 2. Akka Actors Lab
//////////////////////////////////////

* Rewrite lab 1 as Akka Actors.
* Change base Actor class
* Implement the receive callback.

//////////////////////////////////////
// 3. Supervisor Lab
//////////////////////////////////////

* Turn EventProcessor into a Supervisor that supervises all Ships.
* Define faultHandler (for EventProcessor) and lifeCycleConfig (for Ship).
* Add message handler for the Sink message.


object EventProcessor extends Actor {
// ------- NEW -------
  faultHandler = Some(OneForOneStrategy(5, 5000))
  trapExit = true
  start
// ------- NEW -------

  def receive: PartialFunction[Any, Unit] = {
// ------- NEW -------
    case Register(ship) =>
      startLink(ship)
// ------- NEW -------
  }
}

class Ship(val shipName: String, private var currentDestination: Port) extends Actor {
// ------- NEW -------
  lifeCycleConfig = Some(LifeCycle(Permanent, 100))
// ------- NEW -------
  
  def receive: PartialFunction[Any, Unit] = {
// ------- NEW -------
    case Sink =>
      throw new RuntimeException("I'm killed: " + this)
// ------- NEW -------
}

//////////////////////////////////////
// 4. Remote Lab
//////////////////////////////////////

* Add startup of a RemoteServer to the EventProcessor startup.
* Add handler for the NewShip message which should 
  * create, start and link the Ship
  * pass on the message to the Ship for initialization
  * reply with the new Ship 

object EventProcessor extends Actor {
// ------- NEW -------
  RemoteServer.start(None)
// ------- NEW -------

  def receive: PartialFunction[Any, Unit] = {
// ------- NEW -------
    case newShip @ NewShip(_,_) =>
      val ship = spawnLinkRemote(classOf[Ship], "localhost", 9999)
      ship ! newShip
      reply(ship)
// ------- NEW -------
}

//////////////////////////////////////
// 5. REST Lab
//////////////////////////////////////

* Write the EventProcessorFacade.
* Should respond to all the GET messages in the ScalaDoc and pass them on as 
  messages of type Tuple3[String, String, String] to the EventProcessor.

// ------- NEW -------
@Path("/ships/{event}/{shipName}/{port}")
class EventProcessorFacade extends Actor {
  faultHandler = Some(OneForOneStrategy(5, 5000))
  trapExit = true
  start

  private val processor = new EventProcessor
  startLink(processor)

  @GET
  @Produces(Array("text/xml"))
  def process(@PathParam("event") event: String,
              @PathParam("shipName") shipName: String,
              @PathParam("port") port: String) = event match {
    case "create" =>      (processor !! (event, shipName, port)).getOrElse(<error>Could not create ship</error>)
    case "depart" =>      (processor !! (event, shipName, port)).getOrElse(<error>Could not move ship</error>)
    case "arrive" =>      (processor !! (event, shipName, port)).getOrElse(<error>Could not move ship</error>)
    case "destination" => (processor !! (event, shipName, "")).getOrElse(<error>Could get destination for ship</error>)
    case "sink" =>        (processor !! (event, shipName, "")).getOrElse(<error>Could get destination for ship</error>)
    case unknown =>       <error>Unknown event: {unknown}</error>
  }

  def receive: PartialFunction[Any, Unit] = {
    case unknown => log.error("EventProcessorFacade does not respond to any messages, received event: %s", unknown)
  }
}
// ------- NEW -------

//////////////////////////////////////
// 6. Persistence Lab
//////////////////////////////////////

* Add STM management.
* Add persistence for the eventLog.
* Add replay of the eventLog (after Akka Kernel restart).

class EventProcessor extends Actor {
// ------- NEW -------
  makeTransactionRequired
// ------- NEW -------

// ------- NEW -------
  // add persistent vector (backed by Cassandra)
  private lazy val eventLog: PersistentVector = {
    val vector = PersistentState.newVector(CassandraStorageConfig())
    vector.uuid = getClass.getName
    vector
  }
// ------- NEW -------

  def receive: PartialFunction[Any, Unit] = {

// ------- NEW -------
    // respond to GetEventLog
    case GetEventLog =>
      reply(eventLog.toList)
// ------- NEW -------

// ------- NEW -------
      // for every event
      eventLog add event // store in DB
// ------- NEW -------
  }
}
