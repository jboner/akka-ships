/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.cassandra.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class CqlResult implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("CqlResult");
  private static final TField ERROR_CODE_FIELD_DESC = new TField("error_code", TType.I32, (short)1);
  private static final TField ERROR_TXT_FIELD_DESC = new TField("error_txt", TType.STRING, (short)2);
  private static final TField RESULT_SET_FIELD_DESC = new TField("result_set", TType.LIST, (short)3);

  public int error_code;
  public static final int ERROR_CODE = 1;
  public String error_txt;
  public static final int ERROR_TXT = 2;
  public List<Map<String,String>> result_set;
  public static final int RESULT_SET = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean error_code = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(ERROR_CODE, new FieldMetaData("error_code", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(ERROR_TXT, new FieldMetaData("error_txt", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(RESULT_SET, new FieldMetaData("result_set", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.LIST)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(CqlResult.class, metaDataMap);
  }

  public CqlResult() {
  }

  public CqlResult(
    int error_code,
    String error_txt,
    List<Map<String,String>> result_set)
  {
    this();
    this.error_code = error_code;
    this.__isset.error_code = true;
    this.error_txt = error_txt;
    this.result_set = result_set;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CqlResult(CqlResult other) {
    __isset.error_code = other.__isset.error_code;
    this.error_code = other.error_code;
    if (other.isSetError_txt()) {
      this.error_txt = other.error_txt;
    }
    if (other.isSetResult_set()) {
      this.result_set = other.result_set;
    }
  }

  @Override
  public CqlResult clone() {
    return new CqlResult(this);
  }

  public int getError_code() {
    return this.error_code;
  }

  public void setError_code(int error_code) {
    this.error_code = error_code;
    this.__isset.error_code = true;
  }

  public void unsetError_code() {
    this.__isset.error_code = false;
  }

  // Returns true if field error_code is set (has been asigned a value) and false otherwise
  public boolean isSetError_code() {
    return this.__isset.error_code;
  }

  public void setError_codeIsSet(boolean value) {
    this.__isset.error_code = value;
  }

  public String getError_txt() {
    return this.error_txt;
  }

  public void setError_txt(String error_txt) {
    this.error_txt = error_txt;
  }

  public void unsetError_txt() {
    this.error_txt = null;
  }

  // Returns true if field error_txt is set (has been asigned a value) and false otherwise
  public boolean isSetError_txt() {
    return this.error_txt != null;
  }

  public void setError_txtIsSet(boolean value) {
    if (!value) {
      this.error_txt = null;
    }
  }

  public int getResult_setSize() {
    return (this.result_set == null) ? 0 : this.result_set.size();
  }

  public java.util.Iterator<Map<String,String>> getResult_setIterator() {
    return (this.result_set == null) ? null : this.result_set.iterator();
  }

  public void addToResult_set(Map<String,String> elem) {
    if (this.result_set == null) {
      this.result_set = new ArrayList<Map<String,String>>();
    }
    this.result_set.add(elem);
  }

  public List<Map<String,String>> getResult_set() {
    return this.result_set;
  }

  public void setResult_set(List<Map<String,String>> result_set) {
    this.result_set = result_set;
  }

  public void unsetResult_set() {
    this.result_set = null;
  }

  // Returns true if field result_set is set (has been asigned a value) and false otherwise
  public boolean isSetResult_set() {
    return this.result_set != null;
  }

  public void setResult_setIsSet(boolean value) {
    if (!value) {
      this.result_set = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case ERROR_CODE:
      if (value == null) {
        unsetError_code();
      } else {
        setError_code((Integer)value);
      }
      break;

    case ERROR_TXT:
      if (value == null) {
        unsetError_txt();
      } else {
        setError_txt((String)value);
      }
      break;

    case RESULT_SET:
      if (value == null) {
        unsetResult_set();
      } else {
        setResult_set((List<Map<String,String>>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ERROR_CODE:
      return new Integer(getError_code());

    case ERROR_TXT:
      return getError_txt();

    case RESULT_SET:
      return getResult_set();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case ERROR_CODE:
      return isSetError_code();
    case ERROR_TXT:
      return isSetError_txt();
    case RESULT_SET:
      return isSetResult_set();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CqlResult)
      return this.equals((CqlResult)that);
    return false;
  }

  public boolean equals(CqlResult that) {
    if (that == null)
      return false;

    boolean this_present_error_code = true;
    boolean that_present_error_code = true;
    if (this_present_error_code || that_present_error_code) {
      if (!(this_present_error_code && that_present_error_code))
        return false;
      if (this.error_code != that.error_code)
        return false;
    }

    boolean this_present_error_txt = true && this.isSetError_txt();
    boolean that_present_error_txt = true && that.isSetError_txt();
    if (this_present_error_txt || that_present_error_txt) {
      if (!(this_present_error_txt && that_present_error_txt))
        return false;
      if (!this.error_txt.equals(that.error_txt))
        return false;
    }

    boolean this_present_result_set = true && this.isSetResult_set();
    boolean that_present_result_set = true && that.isSetResult_set();
    if (this_present_result_set || that_present_result_set) {
      if (!(this_present_result_set && that_present_result_set))
        return false;
      if (!this.result_set.equals(that.result_set))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case ERROR_CODE:
          if (field.type == TType.I32) {
            this.error_code = iprot.readI32();
            this.__isset.error_code = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERROR_TXT:
          if (field.type == TType.STRING) {
            this.error_txt = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESULT_SET:
          if (field.type == TType.LIST) {
            {
              TList _list22 = iprot.readListBegin();
              this.result_set = new ArrayList<Map<String,String>>(_list22.size);
              for (int _i23 = 0; _i23 < _list22.size; ++_i23)
              {
                Map<String,String> _elem24;
                {
                  TMap _map25 = iprot.readMapBegin();
                  _elem24 = new HashMap<String,String>(2*_map25.size);
                  for (int _i26 = 0; _i26 < _map25.size; ++_i26)
                  {
                    String _key27;
                    String _val28;
                    _key27 = iprot.readString();
                    _val28 = iprot.readString();
                    _elem24.put(_key27, _val28);
                  }
                  iprot.readMapEnd();
                }
                this.result_set.add(_elem24);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
    oprot.writeI32(this.error_code);
    oprot.writeFieldEnd();
    if (this.error_txt != null) {
      oprot.writeFieldBegin(ERROR_TXT_FIELD_DESC);
      oprot.writeString(this.error_txt);
      oprot.writeFieldEnd();
    }
    if (this.result_set != null) {
      oprot.writeFieldBegin(RESULT_SET_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.result_set.size()));
        for (Map<String,String> _iter29 : this.result_set)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter29.size()));
            for (Map.Entry<String, String> _iter30 : _iter29.entrySet())            {
              oprot.writeString(_iter30.getKey());
              oprot.writeString(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CqlResult(");
    boolean first = true;

    sb.append("error_code:");
    sb.append(this.error_code);
    first = false;
    if (!first) sb.append(", ");
    sb.append("error_txt:");
    if (this.error_txt == null) {
      sb.append("null");
    } else {
      sb.append(this.error_txt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("result_set:");
    if (this.result_set == null) {
      sb.append("null");
    } else {
      sb.append(this.result_set);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

